DROP TABLE IF EXISTS BOOKS ;

CREATE TABLE BOOKS (
		BOOK_ID SERIAL PRIMARY KEY ,
		TITLE VARCHAR(100),
		AUTHER VARCHAR(100),
		GENRE VARCHAR(100),
		PUBLISHED_YEAR INT ,
		PRICE NUMERIC(10,5),
		STOCK INT 
);

CREATE TABLE CUSTOMER (
		CUSTOMER_ID SERIAL PRIMARY KEY ,
		NAME VARCHAR(100),
		EMAIL VARCHAR(100),
		PHONE VARCHAR(100),
		CITY VARCHAR(100),
		COUNTRY VARCHAR(100)
);

CREATE TABLE ORDERS (
		ORDER_ID SERIAL PRIMARY KEY ,
		CUSTOMER_ID INT REFERENCES CUSTOMER(CUSTOMER_ID) ,
		BOOK_ID INT REFERENCES BOOKS(BOOK_ID) ,
		ORDER_DATE DATE ,
		QUANTITY INT ,
		TOTAL NUMERIC(10,5)
);


SELECT * FROM BOOKS ;
SELECT * FROM CUSTOMER ;
SELECT *FROM ORDERS ;


-- RETRIVE ALL BOKS OF FICTION GENRE 
SELECT * FROM BOOKS 
WHERE GENRE = 'Fiction' ;

-- find books published after the year 1950
SELECT * FROM BOOKS 
WHERE PUBLISHED_YEAR >1950 ;

-- LIST ALL CUSTEMERS FROM THE CANADA 
SELECT * FROM CUSTOMER 
WHERE COUNTRY = 'Canada' ;

-- show ordefr placed in nove2023
SELECT * FROM ORDERS 
WHERE ORDER_DATE BETWEEN '2023-11-1' AND '2023-11-30' ;

-- RETRIVE TOTAL STOCK OF BOOKS AVALIBLE 
SELECT SUM(STOCK) AS TOTAL_STOCK 
FROM BOOKS ;

-- RETRIVE MOST EXPENSIVE BOOK
SELECT  * FROM BOOKS ORDER BY PRICE DESC 
LIMIT 1 ;

-- WHO ORDERD MORE THAN 1 QUANTITY OF BOOKS 
SELECT * FROM ORDERS 
WHERE QUANTITY >1 ;


-- WHERE TOTAL AMOUNT EXCEEDS 20 

SELECT * FROM ORDERS 
WHERE TOTAL >20 ;

-- LIST ALL THE GENERE  AVALIBLE 
SELECT DISTINCT(GENRE) AS AVALIBLEGENRE 
FROM BOOKS ;

-- FIND BOOKS WITH THE LOWEST STOCK 
SELECT * FROM BOOKS ORDER BY STOCK LIMIT 1 ;

-- CALCULATE THE TOTAL REVENUE GENRATED FROM ALL ORDER
SELECT SUM(TOTAL) AS TOTAL_REVENUE 
FROM ORDERS ;



-- ADVANCE QUERY

-- RETRIVE THE TOTAL NO OF BOOKS SOLD FOR EACH GENRE 

SELECT  B.GENRE ,SUM( O.QUANTITY) AS TOTAL_BOOKS_SOLD  
FROM ORDERS O 
JOIN BOOKS B
ON O.BOOK_ID = B.BOOK_ID 
GROUP BY B.GENRE ;


-- FIND THE AVG OF FANTASY GENRE 
SELECT AVG(PRICE) AS AVERAGEPRICE 
FROM BOOKS 
WHERE GENRE = 'Fantasy' ;

-- list customers who placed at least 2 orders 

SELECT O.CUSTOMER_ID,C.NAME , COUNT(ORDER_ID) AS ORDER_COUNT
FROM ORDERS O
JOIN CUSTOMER C ON O.CUSTOMER_ID = C.CUSTOMER_ID 
GROUP BY O.CUSTOMER_ID , C.NAME
HAVING COUNT (ORDER_ID)>=2 ;

-- MOST FREQUANTLY ORDERD BOOK 
SELECT O.BOOK_ID,B.TITLE ,COUNT(ORDER_ID) AS ORDER_COUNT 
FROM ORDERS O
JOIN BOOKS B ON O.BOOK_ID = B.BOOK_ID 
GROUP BY O.BOOK_ID , B.TITLE 
ORDER BY ORDER_COUNT DESC 
LIMIT 1 ;


-- TOP 3 MOST EXPENSIVE BOOKS OF FANTASY GENRE 
SELECT * FROM BOOKS 
WHERE GENRE = 'Fantasy' 
ORDER BY PRICE DESC 
LIMIT 3 ;

-- RETRIVE THE TOTAL QUANTITY OF BOOKS SOLD BY EACH AUTHER  

SELECT B.AUTHER , SUM(O.QUANTITY) AS TOTAL_QUA 
FROM  ORDERS O 
JOIN BOOKS B ON O.BOOK_ID = B.BOOK_ID 
GROUP BY B.AUTHER
ORDER BY TOTAL_QUA DESC;

-- LIST OF CITY WHERE CUSTOMER WHO SPENT OVER 30 
SELECT DISTINCT C.CITY , O.TOTAL 
FROM  ORDERS O 
JOIN  CUSTOMER C ON O.CUSTOMER_ID = C.CUSTOMER_ID  
WHERE O.TOTAL >30 ;

-- FIND THE CUSTOMER WHO SPEND THE MOST ON ORDERS 

SELECT C.NAME,C.EMAIL,C.CITY,C.CUSTOMER_ID , SUM(O.TOTAL) AS TOTAL_QUA 
FROM  ORDERS O 
JOIN CUSTOMER C ON O.CUSTOMER_ID = C.CUSTOMER_ID 
GROUP BY C.CUSTOMER_ID  
ORDER BY TOTAL_QUA DESC
LIMIT 1;

-- CALCULATE THE STOCK REMAINING AFTER FULFILLING ALL ORDERS
SELECT B.BOOK_ID , B.TITLE,B.STOCK ,COALESCE( SUM(O.QUANTITY),0) AS TOTAL_QUA ,
	 	(B.STOCK - COALESCE( SUM(O.QUANTITY),0)) AS STOCKREMAIN 
FROM  BOOKS B 
LEFT JOIN ORDERS O ON O.BOOK_ID = B.BOOK_ID 
GROUP BY B.BOOK_ID 
ORDER BY B.BOOK_ID DESC;





